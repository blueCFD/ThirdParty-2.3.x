#!/bin/sh
#------------------------------------------------------------------------------
# License
#     Copyright (C) 2011-2014 blueCAPE Lda
#
#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#     For more information about these patches, visit:
#         http://bluecfd.com/Core
#
#     This file is a derivative work of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     getMinGWBin
#
# Description
#     This script will retrieve and install the already built mingw-w32/64
#   cross-compilers from the official mingw-w64 site.
#
#------------------------------------------------------------------------------
# run from third-party directory only
cd ${0%/*} || exit 1
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
    echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
    echo "    The environment variables are inconsistent with the installation."
    echo "    Check the OpenFOAM entries in your dot-files and source them."
    exit 1
}

if ! isMinGW; then
  echo "Error: this script is meant to be used for MinGW compilers only!"
  exit 1
fi

case $WM_COMPILER in
i686-w64-mingw32 | x86_64-w64-mingw32)
  echo "This compiler $WM_COMPILER is currently supported for automatic binary installations."
  ;;

*)
  echo "Error: this compiler $WM_COMPILER is not supported."
  exit 1
  ;;
esac

if [ "x" = "x`which w3m`" ]; then
  echo "Error: this script needs w3m installed!"
  exit 1
fi

. etc/tools/ThirdPartyFunctions
. etc/tools/makeExtraThirdPartyFunctions

#NOTE: going to have to rely on w3m to know the names of the files. Targeted files:
#mingw-w32-1.0-bin_i686-linux_'date'.tar.bz2
#mingw-w64-1.0-bin_i686-linux_'date'.tar.bz2
#mingw-w32-1.0-bin_x86_64-linux_'date'.tar.bz2
#mingw-w64-1.0-bin_x86_64-linux_'date'.tar.bz2
#mingw-w32-1.0-bin_i686-cygwin_'date'.tar.bz2
#mingw-w64-1.0-bin_i686-cygwin_'date'.tar.bz2

targetFolder="$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER/mingw"

if [ -d $targetFolder ]; then
  echo "It seems that there is already an existing mingw cross-compiler installed."
  echo "Do you wish to remove it and update it to the latest available version? (yes or no)"
  read answer
  case $answer in
      yes | y | Y | Yes | YES)
        rm -rf $targetFolder
        ;;
      *)
        echo "Installation aborted."
        exit 1
        ;;
  esac
fi

#get a list of available packages
if [ "x$WM_ARCH_OPTION" = "x64" ]; then
  availableFiles=`w3m -dump -T text/html http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Automated%20Builds/ | grep '.tar.bz2'`
else
  availableFiles=`w3m -dump -T text/html http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Automated%20Builds/ | grep '.tar.bz2'`
fi

#determine what is the specifically desired pre-built architecture
machine=`uname -m`
operatingsystem=`uname -s`
case $operatingsystem in
Linux)
  operatingsystem="linux"
  ;;

CYGWIN*)
  operatingsystem="cygwin"
  ;;

*)
  echo "Error: this script doesn't take into account this operating system: $operatingsystem"
  exit 1
  ;;
esac

#find the type of packages we want
packagefile=`echo $availableFiles | sed -e 's=\ =\n=g' | grep -e "mingw-w$WM_ARCH_OPTION-1\.0-bin_$machine-$operatingsystem" | head -n1`

if [ "x" = "x$packagefile" ]; then
  echo "Error: Unable to find any packages that have the desired specifications"
  exit 1
fi

#download the desired file
downloadFile $packagefile "http://downloads.sourceforge.net/mingw-w64/$packagefile?use_mirror=mesh"

#unpack the files
unpackFile $packagefile $targetFolder

#patch float.h
cd $WM_THIRD_PARTY_DIR
./fixSystemMingw force

#final message
echo "Extraction complete. If there were no visible errors, then you should be ready to go!"
